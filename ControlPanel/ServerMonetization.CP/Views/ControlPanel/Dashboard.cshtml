@using EasyShop.Domain.Enums.CP.DashBoard
@model EasyShop.Domain.ViewModels.CP.ControlPanel.DashBoard.DashBoardViewModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_ControlPanelLayout";

    #region SelectPeriod

    string selectOptions = string.Empty;
    foreach (var item in Model.StatsPeriodList)
    {
        if (item == Model.StatsPeriod)
        {
            selectOptions += $@"<option value=""{item}"" selected=""selected"">{item.ToString().Replace("_", " ")}</option>";
        }
        else
        {
            selectOptions += $@"<option value=""{item}"">{item.ToString().Replace("_", " ")}</option>";
        }
    }

    #endregion SelectPeriod


    var revenueMaxChartValue = Model.RevenueModel.ChartValues.Max();
    var tenPercentsFromRevenueValuesMax = revenueMaxChartValue / 100 * 10 > 0 ? revenueMaxChartValue / 100 * 10 : 1;
    revenueMaxChartValue += tenPercentsFromRevenueValuesMax;

    var ordersMaxChartValue = Model.OrdersModel.ChartValues.Select(x => Int32.Parse(x)).Max();
    var tenPercentsFromOrdersMaxChartValue = ordersMaxChartValue / 100 * 10 > 0 ? ordersMaxChartValue / 100 * 10 : 1;
    ordersMaxChartValue += tenPercentsFromOrdersMaxChartValue;

    var itemsMaxChartValue = Model.ItemsModel.ChartValues.Select(x => Int32.Parse(x)).Max();
    var tenPercentsFromItemsMaxChartValue = itemsMaxChartValue / 100 * 10 > 0 ? itemsMaxChartValue / 100 * 10 : 1;
    itemsMaxChartValue += tenPercentsFromItemsMaxChartValue;

    var buyersMaxChartValue = Model.BuyersModel.ChartValues.Select(x => Int32.Parse(x)).Max();
    var tenPercentsFromBuyersMaxChartValue = buyersMaxChartValue / 100 * 10 > 0 ? buyersMaxChartValue / 100 * 10 : 1;
    buyersMaxChartValue += tenPercentsFromBuyersMaxChartValue;
}


<div class="text-center">
    <h2 style="color: #eee"><span class="icon icon-pie-chart icon-lg"></span> Dashboard</h2>
</div>

<div class="row">
    <div class="col-xs-2 col-xs-offset-10 m-b-md">
        <div class="title-bar">
            <div class="title-bar-actions">
                <div class="btn-group bootstrap-select dropdown fit-width">
                    <select id="selectPeriod" class="selectpicker dropdown" name="period" data-dropdown-align-right="true" data-style="btn-default btn-sm" data-width="fit" tabindex="-98">
                        @Html.Raw(selectOptions)
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row gutter-xs">
    <div class="col-xs-6 col-md-3">
        <div class="card">
            <div class="card-values">
                <div class="p-x">
                    <h4>Total Revenue</h4>
                    <h3 class="card-title fw-l"><span class="icon icon-dollar"></span> @Model.RevenueModel.TotalRevenue</h3>
                </div>
            </div>
            <div class="card-chart">
                <canvas data-chart="line"
                        data-animation="false"
                        data-labels='[@(Model.RevenueModel.ChartLabelValues != null ? string.Join(",", Model.RevenueModel.ChartLabelValues) : "")]'
                        data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#ff8c00", "data": [@(Model.RevenueModel.ChartValues != null ? string.Join(",", Model.RevenueModel.ChartValues) : "")]}]'
                        data-scales='{"yAxes": [{ "ticks": {"max": @revenueMaxChartValue}}]}'
                        data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                        height="35"></canvas>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-md-3">
            <div class="card">
                <div class="card-values">
                    <div class="p-x">
                        <h4>Total Orders</h4>
                        <h3 class="card-title fw-l"><span class="icon icon-shopping-bag"></span> @Model.OrdersModel.TotalOrders</h3>
                    </div>
                </div>
                <div class="card-chart">
                    <canvas data-chart="line"
                            data-animation="false"
                            data-labels='[@(Model.OrdersModel.ChartLabelValues != null ? string.Join(",", Model.OrdersModel.ChartLabelValues) : "")]'
                            data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#ff8c00", "data": [@(Model.OrdersModel.ChartValues != null ? string.Join(",", Model.OrdersModel.ChartValues) : "")]}]'
                            data-scales='{"yAxes": [{ "ticks": {"max": @ordersMaxChartValue}}]}'
                            data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                            height="35"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xs-6 col-md-3">
            <div class="card">
                <div class="card-values">
                    <div class="p-x">
                        <h4>Total Items</h4>
                        <h3 class="card-title fw-l"><span class="icon icon-check-circle"></span> @Model.ItemsModel.TotalItems</h3>
                    </div>
                </div>
                <div class="card-chart">
                    <canvas data-chart="line"
                            data-animation="false"
                            data-labels='[@(Model.ItemsModel.ChartLabelValues != null ? string.Join(",", Model.ItemsModel.ChartLabelValues) : "")]'
                            data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#ff8c00", "data": [@(Model.ItemsModel.ChartValues != null ? string.Join(",", Model.ItemsModel.ChartValues) : "")]}]'
                            data-scales='{"yAxes": [{ "ticks": {"max": @itemsMaxChartValue}}]}'
                            data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                            height="35"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xs-6 col-md-3">
            <div class="card">
                <div class="card-values">
                    <div class="p-x">
                        <h4>Total Buyers</h4>
                        <h3 class="card-title fw-l"><span class="icon icon-group"></span> @Model.BuyersModel.TotalBuyers</h3>
                    </div>
                </div>
                <div class="card-chart">
                    <canvas data-chart="line"
                            data-animation="false"
                            data-labels='[@(Model.BuyersModel.ChartLabelValues != null ? string.Join(",", Model.BuyersModel.ChartLabelValues) : "")]'
                            data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#ff8c00", "data": [@(Model.BuyersModel.ChartValues != null ? string.Join(",", Model.BuyersModel.ChartValues) : "")]}]'
                            data-scales='{"yAxes": [{ "ticks": {"max": @buyersMaxChartValue}}]}'
                            data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                            height="35"></canvas>
                </div>
            </div>
        </div>
</div>

@if (Model.StatsPeriod == DashBoardStatsPeriodEnum.Today)
{
    <div class="well text-center">
        <span class="icon icon-area-chart icon-lg"></span> The graph can be seen starting with weekly statistics.
    </div>
}


@section Scripts
{
    <script src="~/js/customScripts/CP/DashBoardStatsSetLocationHref.js" asp-append-version="true"></script>
}


