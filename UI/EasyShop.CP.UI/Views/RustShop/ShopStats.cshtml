@using EasyShop.Domain.Enums.Rust
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore.Internal
@model EasyShop.Domain.ViewModels.Rust.Shop.RustShopViewModel
@{
    ViewData["Title"] = "Rust shop";
    Layout = "Partial/_RustBaseLayout";

    #region SelectPeriod

    string selectOptions = string.Empty;
    foreach (var item in Model.StatsPeriodList)
    {
        if (item == Model.StatsPeriod)
        {
            selectOptions += $@"<option value=""{item}"" selected=""selected"">{item.ToString().Replace("_", " ")}</option>";
        }
        else
        {
            selectOptions += $@"<option value=""{item}"">{item.ToString().Replace("_", " ")}</option>";
        }
    }

    #endregion SelectPeriod


    #region RevenueDataVariables

    KeyValuePair<RustShopStatsUnitEnum, (IEnumerable<string>, IEnumerable<string>, IEnumerable<string>)> revenueData;
    string revenueDates = string.Empty;
    string revenueTotal = string.Empty;
    string revenueValues = string.Empty;
    Decimal revenueValuesMax = default;

    #endregion RevenueDataVariables

    #region OrdersData Variables

    KeyValuePair<RustShopStatsUnitEnum, (IEnumerable<string>, IEnumerable<string>, IEnumerable<string>)> ordersData;
    string ordersDates = string.Empty;
    string ordersTotal = string.Empty;
    string ordersValues = string.Empty;
    int ordersValuesMax = 0;

    #endregion OrdersData Variables

    #region SoldItems Variables

    KeyValuePair<RustShopStatsUnitEnum, (IEnumerable<string>, IEnumerable<string>, IEnumerable<string>)> soldItemsData;
    string soldItemsDates = string.Empty;
    string soldItemsTotal = string.Empty;
    string soldItemsValues = string.Empty;
    int soldItemsValuesMax = 0;

    #endregion SoldItems Variables

    #region Buyers Variables

    KeyValuePair<RustShopStatsUnitEnum, (IEnumerable<string>, IEnumerable<string>, IEnumerable<string>)> buyersData;
    string buyersDates = string.Empty;
    string buyersTotal = string.Empty;
    string buyersValues = string.Empty;
    int buyersValuesMax = 0;

    #endregion Buyers Variables

    #region RevenueOverviewVariables

    KeyValuePair<RustShopStatsUnitEnum, (IEnumerable<string>, IEnumerable<string>, IEnumerable<string>)> revenueOverviewData;
    string revenueOverviewDates = string.Empty;
    string revenueOverviewValues = string.Empty;
    string revenueOverviewPreviousWeekValues = string.Empty;

    #endregion RevenueOverviewVariables


    if (Model.StatsPeriod == RustShopStatsEnum.Today)
    {
        revenueData = Model.Stats.First(x => x.Key == RustShopStatsUnitEnum.Revenue);
        revenueTotal = revenueData.Value.Item2.First();

        ordersData = Model.Stats.First(x => x.Key == RustShopStatsUnitEnum.Orders);
        ordersTotal = revenueData.Value.Item2.First();

        soldItemsData = Model.Stats.First(x => x.Key == RustShopStatsUnitEnum.ItemsSold);
        soldItemsTotal = revenueData.Value.Item2.First();

        buyersData = Model.Stats.First(x => x.Key == RustShopStatsUnitEnum.Buyers);
        buyersTotal = revenueData.Value.Item2.First();
    }
    else
    {
        #region RevenueData

        revenueData = Model.Stats.FirstOrDefault(x => x.Key == RustShopStatsUnitEnum.Revenue);
        revenueTotal = revenueData.Value.Item2.Select(x => Decimal.Parse(x)).Sum().ToString();
        revenueValues = string.Join(", ", revenueData.Value.Item2);
        revenueValuesMax = revenueData.Value.Item2.Select(x => Decimal.Parse(x)).Max();
        var tenPercentsFromRevenueValuesMax = revenueValuesMax / 100 * 10 > 0 ? revenueValuesMax / 100 * 10 : 1;
        revenueValuesMax += tenPercentsFromRevenueValuesMax;

        for (int i = 0; i < revenueData.Value.Item1.Count(); i++)
        {
            string item = revenueData.Value.Item1.ElementAt(i);

            if (i != revenueData.Value.Item1.Count() - 1)
            {
                revenueDates += $"\"{item}\", ";
            }
            else
            {
                revenueDates += $"\"{item}\"";
            }
        }

        #endregion RevenueData

        #region OrdersData

        ordersData = Model.Stats.FirstOrDefault(x => x.Key == RustShopStatsUnitEnum.Orders);
        ordersDates = string.Empty;
        ordersTotal = ordersData.Value.Item2.Select(x => Int32.Parse(x)).Sum().ToString();
        ordersValues = string.Join(", ", ordersData.Value.Item2);
        ordersValuesMax = ordersData.Value.Item2.Select(x => Int32.Parse(x)).Max();
        int tenPercentsFromOrdersValuesMax = (ordersValuesMax / 100 * 10) > 0 ? ordersValuesMax / 100 * 10 : 1;
        ordersValuesMax += tenPercentsFromOrdersValuesMax;

        for (int i = 0; i < ordersData.Value.Item1.Count(); i++)
        {
            string item = ordersData.Value.Item1.ElementAt(i);

            if (i != ordersData.Value.Item1.Count() - 1)
            {
                ordersDates += $"\"{item}\", ";
            }
            else
            {
                ordersDates += $"\"{item}\"";
            }
        }

        #endregion OrdersData

        #region SoldItems

        soldItemsData = Model.Stats.FirstOrDefault(x => x.Key == RustShopStatsUnitEnum.ItemsSold);
        soldItemsDates = string.Empty;
        soldItemsTotal = soldItemsData.Value.Item2.Select(x => Int32.Parse(x)).Sum().ToString();
        soldItemsValues = string.Join(", ", soldItemsData.Value.Item2);
        soldItemsValuesMax = soldItemsData.Value.Item2.Select(x => Int32.Parse(x)).Max();
        int tenPercentsFromSoldItemsValuesMax = (soldItemsValuesMax / 100 * 10) > 0 ? soldItemsValuesMax / 100 * 10 : 1;
        soldItemsValuesMax += tenPercentsFromSoldItemsValuesMax;

        for (int i = 0; i < soldItemsData.Value.Item1.Count(); i++)
        {
            string item = soldItemsData.Value.Item1.ElementAt(i);

            if (i != soldItemsData.Value.Item1.Count() - 1)
            {
                soldItemsDates += $"\"{item}\", ";
            }
            else
            {
                soldItemsDates += $"\"{item}\"";
            }
        }

        #endregion SoldItems

        #region Buyers

        buyersData = Model.Stats.FirstOrDefault(x => x.Key == RustShopStatsUnitEnum.Buyers);
        buyersDates = string.Empty;
        buyersTotal = buyersData.Value.Item2.Select(x => Int32.Parse(x)).ToList().Distinct().Sum().ToString();
        buyersValues = string.Join(", ", buyersData.Value.Item2);
        buyersValuesMax = buyersData.Value.Item2.Select(x => Int32.Parse(x)).Max();
        int tenPercentsFromBuyersValuesMax = (buyersValuesMax / 100 * 10) > 0 ? buyersValuesMax / 100 * 10 : 1;
        buyersValuesMax += tenPercentsFromBuyersValuesMax;

        for (int i = 0; i < buyersData.Value.Item1.Count(); i++)
        {
            string item = buyersData.Value.Item1.ElementAt(i);

            if (i != buyersData.Value.Item1.Count() - 1)
            {
                buyersDates += $"\"{item}\", ";
            }
            else
            {
                buyersDates += $"\"{item}\"";
            }
        }

        #endregion Buyers

        #region Revenue Overview

        revenueOverviewData = Model.Stats.FirstOrDefault(x => x.Key == RustShopStatsUnitEnum.RevenueOverview);
        revenueOverviewDates = string.Empty;
        revenueOverviewValues = string.Join(", ", revenueOverviewData.Value.Item2);
        revenueOverviewPreviousWeekValues = string.Join(", ", revenueOverviewData.Value.Item3);

        for (int i = 0; i < revenueOverviewData.Value.Item1.Count(); i++)
        {
            string item = revenueOverviewData.Value.Item1.ElementAt(i);

            if (i != revenueOverviewData.Value.Item1.Count() - 1)
            {
                revenueOverviewDates += $"\"{item}\", ";
            }
            else
            {
                revenueOverviewDates += $"\"{item}\"";
            }
        }

        #endregion Revenue Overview
    }
}



<div class="row">
    <div class="col-xs-2 col-xs-offset-10 m-b-md">
        <div class="title-bar">
            <div class="title-bar-actions">
                <div class="btn-group bootstrap-select dropdown fit-width">
                    <select id="selectPeriod" class="selectpicker dropdown" name="period" data-dropdown-align-right="true" data-style="btn-default btn-sm" data-width="fit" tabindex="-98">
                        @Html.Raw(selectOptions)
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row gutter-xs">
    <div class="col-xs-6 col-md-3">
        <div class="card">
            <div class="card-values">
                <div class="p-x">
                    <small>Revenue</small>
                    <h3 class="card-title fw-l"><span class="icon icon-dollar"></span> @revenueTotal</h3>
                </div>
            </div>
            <div class="card-chart">
                <canvas data-chart="line"
                        data-animation="false"
                        data-labels='[@revenueDates]'
                        data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#00aced", "data": [@revenueValues]}]'
                        data-scales='{"yAxes": [{ "ticks": {"max": @revenueValuesMax}}]}'
                        data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                        height="35"></canvas>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-md-3">
        <div class="card">
            <div class="card-values">
                <div class="p-x">
                    <small>Orders</small>
                    <h3 class="card-title fw-l"><span class="icon icon-shopping-bag"></span> @ordersTotal</h3>
                </div>
            </div>
            <div class="card-chart">
                <canvas data-chart="line"
                        data-animation="false"
                        data-labels='[@ordersDates]'
                        data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#00aced", "data": [@ordersValues]}]'
                        data-scales='{"yAxes": [{ "ticks": {"max": @ordersValuesMax}}]}'
                        data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                        height="35"></canvas>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-md-3">
        <div class="card">
            <div class="card-values">
                <div class="p-x">
                    <small>Items</small>
                    <h3 class="card-title fw-l"><span class="icon icon-check-circle"></span> @soldItemsTotal</h3>
                </div>
            </div>
            <div class="card-chart">
                <canvas data-chart="line"
                        data-animation="false"
                        data-labels='[@soldItemsDates]'
                        data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#00aced", "data": [@soldItemsValues]}]'
                        data-scales='{"yAxes": [{ "ticks": {"max": @soldItemsValuesMax}}]}'
                        data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                        height="35"></canvas>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-md-3">
        <div class="card">
            <div class="card-values">
                <div class="p-x">
                    <small>Buyers</small>
                    <h3 class="card-title fw-l"><span class="icon icon-group"></span> @buyersTotal</h3>
                </div>
            </div>
            <div class="card-chart">
                <canvas data-chart="line"
                        data-animation="false"
                        data-labels='[@buyersDates]'
                        data-values='[{"backgroundColor": "rgba(255, 255, 255, 0.1)", "borderColor": "#00aced", "data": [@buyersValues]}]'
                        data-scales='{"yAxes": [{ "ticks": {"max": @buyersValuesMax}}]}'
                        data-hide='["legend", "points", "scalesX", "scalesY", "tooltips"]'
                        height="35"></canvas>
            </div>
        </div>
    </div>
</div>

@if (Model.StatsPeriod != RustShopStatsEnum.Today)
{
    <div class="row gutter-xs">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Revenue Overview</h4>
                </div>
                <div class="card-body">
                    <div class="card-chart">
                        <canvas data-chart="line"
                                data-animation="false"
                                data-labels='[@revenueOverviewDates]'
                                data-values='[
                            {
                                "label": "This week",
                                "backgroundColor": "transparent",
                                "borderColor": "#00aced",
                                "pointBackgroundColor": "#00aced",
                                "data": [@revenueOverviewValues]
                            },
                            {
                                "label": "Last week",
                                "backgroundColor": "transparent",
                                "borderColor": "#75ac00",
                                "pointBackgroundColor": "#75ac00",
                                "data": [@revenueOverviewPreviousWeekValues]
                            }]'
                                data-tooltips='{"mode": "label"}'
                                data-hide='["gridLinesX", "legend"]'
                                height="150"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts
{
    <script src="~/js/customScripts/Rust/RustShopStatsSetLocationHref.js" asp-append-version="true"></script>
}
